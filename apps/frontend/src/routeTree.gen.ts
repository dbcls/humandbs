/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const DataUsageIndexLazyImport = createFileRoute('/data-usage/')()
const DataProvisionIndexLazyImport = createFileRoute('/data-provision/')()
const ContactIndexLazyImport = createFileRoute('/contact/')()
const AchievementsIndexLazyImport = createFileRoute('/achievements/')()
const AboutDataIndexLazyImport = createFileRoute('/about-data/')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const DataUsageIndexLazyRoute = DataUsageIndexLazyImport.update({
  id: '/data-usage/',
  path: '/data-usage/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/data-usage/index.lazy').then((d) => d.Route),
)

const DataProvisionIndexLazyRoute = DataProvisionIndexLazyImport.update({
  id: '/data-provision/',
  path: '/data-provision/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/data-provision/index.lazy').then((d) => d.Route),
)

const ContactIndexLazyRoute = ContactIndexLazyImport.update({
  id: '/contact/',
  path: '/contact/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contact/index.lazy').then((d) => d.Route))

const AchievementsIndexLazyRoute = AchievementsIndexLazyImport.update({
  id: '/achievements/',
  path: '/achievements/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/achievements/index.lazy').then((d) => d.Route),
)

const AboutDataIndexLazyRoute = AboutDataIndexLazyImport.update({
  id: '/about-data/',
  path: '/about-data/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/about-data/index.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about-data/': {
      id: '/about-data/'
      path: '/about-data'
      fullPath: '/about-data'
      preLoaderRoute: typeof AboutDataIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/achievements/': {
      id: '/achievements/'
      path: '/achievements'
      fullPath: '/achievements'
      preLoaderRoute: typeof AchievementsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/contact/': {
      id: '/contact/'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/data-provision/': {
      id: '/data-provision/'
      path: '/data-provision'
      fullPath: '/data-provision'
      preLoaderRoute: typeof DataProvisionIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/data-usage/': {
      id: '/data-usage/'
      path: '/data-usage'
      fullPath: '/data-usage'
      preLoaderRoute: typeof DataUsageIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about-data': typeof AboutDataIndexLazyRoute
  '/achievements': typeof AchievementsIndexLazyRoute
  '/contact': typeof ContactIndexLazyRoute
  '/data-provision': typeof DataProvisionIndexLazyRoute
  '/data-usage': typeof DataUsageIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about-data': typeof AboutDataIndexLazyRoute
  '/achievements': typeof AchievementsIndexLazyRoute
  '/contact': typeof ContactIndexLazyRoute
  '/data-provision': typeof DataProvisionIndexLazyRoute
  '/data-usage': typeof DataUsageIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about-data/': typeof AboutDataIndexLazyRoute
  '/achievements/': typeof AchievementsIndexLazyRoute
  '/contact/': typeof ContactIndexLazyRoute
  '/data-provision/': typeof DataProvisionIndexLazyRoute
  '/data-usage/': typeof DataUsageIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about-data'
    | '/achievements'
    | '/contact'
    | '/data-provision'
    | '/data-usage'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about-data'
    | '/achievements'
    | '/contact'
    | '/data-provision'
    | '/data-usage'
  id:
    | '__root__'
    | '/'
    | '/about-data/'
    | '/achievements/'
    | '/contact/'
    | '/data-provision/'
    | '/data-usage/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutDataIndexLazyRoute: typeof AboutDataIndexLazyRoute
  AchievementsIndexLazyRoute: typeof AchievementsIndexLazyRoute
  ContactIndexLazyRoute: typeof ContactIndexLazyRoute
  DataProvisionIndexLazyRoute: typeof DataProvisionIndexLazyRoute
  DataUsageIndexLazyRoute: typeof DataUsageIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutDataIndexLazyRoute: AboutDataIndexLazyRoute,
  AchievementsIndexLazyRoute: AchievementsIndexLazyRoute,
  ContactIndexLazyRoute: ContactIndexLazyRoute,
  DataProvisionIndexLazyRoute: DataProvisionIndexLazyRoute,
  DataUsageIndexLazyRoute: DataUsageIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about-data/",
        "/achievements/",
        "/contact/",
        "/data-provision/",
        "/data-usage/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about-data/": {
      "filePath": "about-data/index.lazy.tsx"
    },
    "/achievements/": {
      "filePath": "achievements/index.lazy.tsx"
    },
    "/contact/": {
      "filePath": "contact/index.lazy.tsx"
    },
    "/data-provision/": {
      "filePath": "data-provision/index.lazy.tsx"
    },
    "/data-usage/": {
      "filePath": "data-usage/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
